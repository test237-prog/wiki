# Declare survey design
#NB: this doesn't work with NAs for weights, so let's recode NAs to zeroes
CI <- CI %>% mutate(GlobalPSW = ifelse(is.na(GlobalPSW), 0, GlobalPSW))
CI <- CI %>% mutate(FullPSW = ifelse(is.na(FullPSW), 0, FullPSW))
CI <- CI %>% mutate(globalpswincl = ifelse(is.na(globalpswincl), 0, globalpswincl))
CI <- CI %>% mutate(fullpswincl = ifelse(is.na(fullpswincl), 0, fullpswincl))
CI_global_design = svydesign(
ids = ~0, #formula in svydesign indicating there are no clusters
data = CI,      #this is the dataset
weights = ~GlobalPSW) #this is the 'weight' variable
CI_full_design = svydesign(
ids = ~0, #formula in svydesign indicating there are no clusters
data = CI,      #this is the dataset
weights = ~FullPSW) #this is the 'weight' variable
# Reproducing simple gender plot:
moe_topline(df=CI, variable=gender, weight=GlobalPSW) %>%
ggplot(aes(x= reorder(Response, -Percent), y=Percent, fill = Response)) +
geom_bar(stat = "identity") +
geom_pointrange( aes(x=Response, y=Percent,
ymin=Percent-MOE, ymax=Percent+MOE), colour="black",
alpha=0.9, size=0.3) +
labs(title = "",
subtitle = "Gender Distribution: Global Weights",
caption = "",
x = "",
y = "Percent") +
geom_text(
aes(label = scales::percent(Percent/100, accuracy=0.1), #add label
vjust=-1,
# hjust=0,
),             #font family
size = 3, #size of text in mm
position = position_dodge(width = 0.9)) +
theme_wiki()+
scale_fill_wiki_d("main")
# Gender attrition plot
# Use pacman package to load the following packages (and install any that are not installed)
pacman::p_load(survey, ggplot2, tidyr, plyr, dplyr, sjlabelled, GGally, ggeffects, ggeasy, ggpubr,
sjmisc, googledrive, weights, anesrake, pollster, readxl, magick, RColorBrewer,
rmarkdown, officer, officedown, magrittr, ggbeeswarm, scales, forcats,
foreign, questionr, knitr, hrbrthemes, waffle, haven)
# devtools::install_github("liamgilbey/ggwaffle")
# devtools::install_github("hrbrmstr/waffle")
# library(ggwaffle)
#Load Data
###############################
# Weighted 2022 Community Insights Data
CI <- haven::read_sav("CI2022_data.sav")
# CI_2022_filter <- CI %>%
#   select(ResponseId, GlobalPSW)
#
# write.csv(CI_2022_filter,file="CI_2022_IDs_weights")
# Weighted 2019, 2020 Community Insights Data
# convenience function to remove empty character columns following spss file import
remove_empty_characters_after_foreign = function(data){
empty_chars = vapply(data, FUN = function(column) is.character(column) & all(is.na(column)), FUN.VALUE = logical(1))
additional_chars = grepl("00\\d$", colnames(data), perl = TRUE)
to_remove = empty_chars & additional_chars
if(any(to_remove)){
message(paste0("Removing ", paste(colnames(data)[to_remove], collapse = ", "),"..."))
}
data[,!to_remove, drop = FALSE]
}
# remove any empty character variables (if they exist)
CI = remove_empty_characters_after_foreign(CI)
# filter to over-18 only:
CI <-  filter(CI, I09=="Yes")
# CI_globalpsw <- CI %>% filter(!is.na(GlobalPSW))
# filter out one weird respondent of unknown provenance:
CI <- filter(CI, ResponseId!="R_A5TNOX63C683SZX")
# Declare survey design
#NB: this doesn't work with NAs for weights, so let's recode NAs to zeroes
CI <- CI %>% mutate(GlobalPSW = ifelse(is.na(GlobalPSW), 0, GlobalPSW))
CI <- CI %>% mutate(FullPSW = ifelse(is.na(FullPSW), 0, FullPSW))
CI <- CI %>% mutate(globalpswincl = ifelse(is.na(globalpswincl), 0, globalpswincl))
CI <- CI %>% mutate(fullpswincl = ifelse(is.na(fullpswincl), 0, fullpswincl))
CI_global_design = svydesign(
ids = ~0, #formula in svydesign indicating there are no clusters
data = CI,      #this is the dataset
weights = ~GlobalPSW) #this is the 'weight' variable
CI_full_design = svydesign(
ids = ~0, #formula in svydesign indicating there are no clusters
data = CI,      #this is the dataset
weights = ~FullPSW) #this is the 'weight' variable
# Reproducing simple gender plot:
moe_topline(df=CI, variable=gender, weight=GlobalPSW) %>%
ggplot(aes(x= reorder(Response, -Percent), y=Percent, fill = Response)) +
geom_bar(stat = "identity") +
geom_pointrange( aes(x=Response, y=Percent,
ymin=Percent-MOE, ymax=Percent+MOE), colour="black",
alpha=0.9, size=0.3) +
labs(title = "",
subtitle = "Gender Distribution: Global Weights",
caption = "",
x = "",
y = "Percent") +
geom_text(
aes(label = scales::percent(Percent/100, accuracy=0.1), #add label
vjust=-1,
# hjust=0,
),             #font family
size = 3, #size of text in mm
position = position_dodge(width = 0.9)) +
theme_wiki()+
scale_fill_wiki_d("alt")
# Gender attrition plot
# Use pacman package to load the following packages (and install any that are not installed)
pacman::p_load(testpackage, survey, ggplot2, tidyr, plyr, dplyr, sjlabelled, GGally, ggeffects, ggeasy, ggpubr,
sjmisc, googledrive, weights, anesrake, pollster, readxl, magick, RColorBrewer,
rmarkdown, officer, officedown, magrittr, ggbeeswarm, scales, forcats,
foreign, questionr, knitr, hrbrthemes, waffle, haven)
# devtools::install_github("liamgilbey/ggwaffle")
# devtools::install_github("hrbrmstr/waffle")
# library(ggwaffle)
#Load Data
###############################
# Weighted 2022 Community Insights Data
CI <- haven::read_sav("CI2022_data.sav")
setwd("C:/Users/zechs/wikimedia/insights")
setwd("C:/Users/zechs/wikimedia/insights")
getwd()
setwd("C:/Users/zechs/desktop/wikimedia/insights")
# Use pacman package to load the following packages (and install any that are not installed)
pacman::p_load(testpackage, survey, ggplot2, tidyr, plyr, dplyr, sjlabelled, GGally, ggeffects, ggeasy, ggpubr,
sjmisc, googledrive, weights, anesrake, pollster, readxl, magick, RColorBrewer,
rmarkdown, officer, officedown, magrittr, ggbeeswarm, scales, forcats,
foreign, questionr, knitr, hrbrthemes, waffle, haven)
# devtools::install_github("liamgilbey/ggwaffle")
# devtools::install_github("hrbrmstr/waffle")
# library(ggwaffle)
#Load Data
###############################
# Weighted 2022 Community Insights Data
CI <- haven::read_sav("CI2022_data.sav")
# CI_2022_filter <- CI %>%
#   select(ResponseId, GlobalPSW)
#
# write.csv(CI_2022_filter,file="CI_2022_IDs_weights")
# Weighted 2019, 2020 Community Insights Data
# convenience function to remove empty character columns following spss file import
remove_empty_characters_after_foreign = function(data){
empty_chars = vapply(data, FUN = function(column) is.character(column) & all(is.na(column)), FUN.VALUE = logical(1))
additional_chars = grepl("00\\d$", colnames(data), perl = TRUE)
to_remove = empty_chars & additional_chars
if(any(to_remove)){
message(paste0("Removing ", paste(colnames(data)[to_remove], collapse = ", "),"..."))
}
data[,!to_remove, drop = FALSE]
}
# remove any empty character variables (if they exist)
CI = remove_empty_characters_after_foreign(CI)
# filter to over-18 only:
CI <-  filter(CI, I09=="Yes")
# CI_globalpsw <- CI %>% filter(!is.na(GlobalPSW))
# filter out one weird respondent of unknown provenance:
CI <- filter(CI, ResponseId!="R_A5TNOX63C683SZX")
# Declare survey design
#NB: this doesn't work with NAs for weights, so let's recode NAs to zeroes
CI <- CI %>% mutate(GlobalPSW = ifelse(is.na(GlobalPSW), 0, GlobalPSW))
CI <- CI %>% mutate(FullPSW = ifelse(is.na(FullPSW), 0, FullPSW))
CI <- CI %>% mutate(globalpswincl = ifelse(is.na(globalpswincl), 0, globalpswincl))
CI <- CI %>% mutate(fullpswincl = ifelse(is.na(fullpswincl), 0, fullpswincl))
CI_global_design = svydesign(
ids = ~0, #formula in svydesign indicating there are no clusters
data = CI,      #this is the dataset
weights = ~GlobalPSW) #this is the 'weight' variable
CI_full_design = svydesign(
ids = ~0, #formula in svydesign indicating there are no clusters
data = CI,      #this is the dataset
weights = ~FullPSW) #this is the 'weight' variable
# Reproducing simple gender plot:
moe_topline(df=CI, variable=gender, weight=GlobalPSW) %>%
ggplot(aes(x= reorder(Response, -Percent), y=Percent, fill = Response)) +
geom_bar(stat = "identity") +
geom_pointrange( aes(x=Response, y=Percent,
ymin=Percent-MOE, ymax=Percent+MOE), colour="black",
alpha=0.9, size=0.3) +
labs(title = "",
subtitle = "Gender Distribution: Global Weights",
caption = "",
x = "",
y = "Percent") +
geom_text(
aes(label = scales::percent(Percent/100, accuracy=0.1), #add label
vjust=-1,
# hjust=0,
),             #font family
size = 3, #size of text in mm
position = position_dodge(width = 0.9)) +
theme_wiki()+
scale_fill_wiki_d("alt")
# Gender attrition plot
library(showtext)
moe_topline(df=CI, variable=gender, weight=GlobalPSW) %>%
ggplot(aes(x= reorder(Response, -Percent), y=Percent, fill = Response)) +
geom_bar(stat = "identity") +
geom_pointrange( aes(x=Response, y=Percent,
ymin=Percent-MOE, ymax=Percent+MOE), colour="black",
alpha=0.9, size=0.3) +
labs(title = "",
subtitle = "Gender Distribution: Global Weights",
caption = "",
x = "",
y = "Percent") +
geom_text(
aes(label = scales::percent(Percent/100, accuracy=0.1), #add label
vjust=-1,
# hjust=0,
),             #font family
size = 3, #size of text in mm
position = position_dodge(width = 0.9)) +
theme_wiki()+
scale_fill_wiki_d("alt")
setwd("C:/Users/zechs/testpackage")
document()
library(devtools)
library(roxygen2)
library(usethis)
setwd("C:/Users/zechs/testpackage")
document()
library(showtext)
library(extrafont)
setwd("C:/Users/zechs/testpackage")
document()
setwd("C:/Users/zechs/testpackage")
document()
setwd("..")
install("testpackage")
setwd("C:/Users/zechs/testpackage")
document()
setwd("..")
install("testpackage")
setwd("C:/Users/zechs/testpackage")
document()
setwd("..")
install("testpackage")
setwd("C:/Users/zechs/testpackage")
document()
setwd("..")
install("testpackage")
setwd("C:/Users/zechs/testpackage")
document()
setwd("..")
install("testpackage")
.Last.error
library(testpackage)
pacman::p_load(testpackage, survey, ggplot2, tidyr, plyr, dplyr, sjlabelled, GGally, ggeffects, ggeasy, ggpubr,
sjmisc, googledrive, weights, anesrake, pollster, readxl, magick, RColorBrewer,
rmarkdown, officer, officedown, magrittr, ggbeeswarm, scales, forcats,
foreign, questionr, knitr, hrbrthemes, waffle, haven)
# devtools::install_github("liamgilbey/ggwaffle")
# devtools::install_github("hrbrmstr/waffle")
# library(ggwaffle)
#Load Data
###############################
# Weighted 2022 Community Insights Data
CI <- haven::read_sav("CI2022_data.sav")
setwd("C:/Users/zechs/desktop/wikimedia/insights")
# Weighted 2022 Community Insights Data
CI <- haven::read_sav("CI2022_data.sav")
# CI_2022_filter <- CI %>%
#   select(ResponseId, GlobalPSW)
#
# write.csv(CI_2022_filter,file="CI_2022_IDs_weights")
# Weighted 2019, 2020 Community Insights Data
# convenience function to remove empty character columns following spss file import
remove_empty_characters_after_foreign = function(data){
empty_chars = vapply(data, FUN = function(column) is.character(column) & all(is.na(column)), FUN.VALUE = logical(1))
additional_chars = grepl("00\\d$", colnames(data), perl = TRUE)
to_remove = empty_chars & additional_chars
if(any(to_remove)){
message(paste0("Removing ", paste(colnames(data)[to_remove], collapse = ", "),"..."))
}
data[,!to_remove, drop = FALSE]
}
# remove any empty character variables (if they exist)
CI = remove_empty_characters_after_foreign(CI)
# filter to over-18 only:
CI <-  filter(CI, I09=="Yes")
# CI_globalpsw <- CI %>% filter(!is.na(GlobalPSW))
# filter out one weird respondent of unknown provenance:
CI <- filter(CI, ResponseId!="R_A5TNOX63C683SZX")
# Declare survey design
#NB: this doesn't work with NAs for weights, so let's recode NAs to zeroes
CI <- CI %>% mutate(GlobalPSW = ifelse(is.na(GlobalPSW), 0, GlobalPSW))
CI <- CI %>% mutate(FullPSW = ifelse(is.na(FullPSW), 0, FullPSW))
CI <- CI %>% mutate(globalpswincl = ifelse(is.na(globalpswincl), 0, globalpswincl))
CI <- CI %>% mutate(fullpswincl = ifelse(is.na(fullpswincl), 0, fullpswincl))
CI_global_design = svydesign(
ids = ~0, #formula in svydesign indicating there are no clusters
data = CI,      #this is the dataset
weights = ~GlobalPSW) #this is the 'weight' variable
CI_full_design = svydesign(
ids = ~0, #formula in svydesign indicating there are no clusters
data = CI,      #this is the dataset
weights = ~FullPSW) #this is the 'weight' variable
# Reproducing simple gender plot:
moe_topline(df=CI, variable=gender, weight=GlobalPSW) %>%
ggplot(aes(x= reorder(Response, -Percent), y=Percent, fill = Response)) +
geom_bar(stat = "identity") +
geom_pointrange( aes(x=Response, y=Percent,
ymin=Percent-MOE, ymax=Percent+MOE), colour="black",
alpha=0.9, size=0.3) +
labs(title = "",
subtitle = "Gender Distribution: Global Weights",
caption = "",
x = "",
y = "Percent") +
geom_text(
aes(label = scales::percent(Percent/100, accuracy=0.1), #add label
vjust=-1,
# hjust=0,
),             #font family
size = 3, #size of text in mm
position = position_dodge(width = 0.9)) +
theme_wiki()+
scale_fill_wiki_d("alt")
# Gender attrition plot
pacman::p_load(testpackage, survey, ggplot2, tidyr, plyr, dplyr, sjlabelled, GGally, ggeffects, ggeasy, ggpubr,
sjmisc, googledrive, weights, anesrake, pollster, readxl, magick, RColorBrewer,
rmarkdown, officer, officedown, magrittr, ggbeeswarm, scales, forcats,
foreign, questionr, knitr, hrbrthemes, waffle, haven)
# devtools::install_github("liamgilbey/ggwaffle")
# devtools::install_github("hrbrmstr/waffle")
# library(ggwaffle)
#Load Data
###############################
setwd("C:/Users/zechs/desktop/wikimedia/insights")
# Weighted 2022 Community Insights Data
CI <- haven::read_sav("CI2022_data.sav")
# CI_2022_filter <- CI %>%
#   select(ResponseId, GlobalPSW)
#
# write.csv(CI_2022_filter,file="CI_2022_IDs_weights")
# Weighted 2019, 2020 Community Insights Data
# convenience function to remove empty character columns following spss file import
remove_empty_characters_after_foreign = function(data){
empty_chars = vapply(data, FUN = function(column) is.character(column) & all(is.na(column)), FUN.VALUE = logical(1))
additional_chars = grepl("00\\d$", colnames(data), perl = TRUE)
to_remove = empty_chars & additional_chars
if(any(to_remove)){
message(paste0("Removing ", paste(colnames(data)[to_remove], collapse = ", "),"..."))
}
data[,!to_remove, drop = FALSE]
}
# remove any empty character variables (if they exist)
CI = remove_empty_characters_after_foreign(CI)
# filter to over-18 only:
CI <-  filter(CI, I09=="Yes")
# CI_globalpsw <- CI %>% filter(!is.na(GlobalPSW))
# filter out one weird respondent of unknown provenance:
CI <- filter(CI, ResponseId!="R_A5TNOX63C683SZX")
# Declare survey design
#NB: this doesn't work with NAs for weights, so let's recode NAs to zeroes
CI <- CI %>% mutate(GlobalPSW = ifelse(is.na(GlobalPSW), 0, GlobalPSW))
CI <- CI %>% mutate(FullPSW = ifelse(is.na(FullPSW), 0, FullPSW))
CI <- CI %>% mutate(globalpswincl = ifelse(is.na(globalpswincl), 0, globalpswincl))
CI <- CI %>% mutate(fullpswincl = ifelse(is.na(fullpswincl), 0, fullpswincl))
CI_global_design = svydesign(
ids = ~0, #formula in svydesign indicating there are no clusters
data = CI,      #this is the dataset
weights = ~GlobalPSW) #this is the 'weight' variable
CI_full_design = svydesign(
ids = ~0, #formula in svydesign indicating there are no clusters
data = CI,      #this is the dataset
weights = ~FullPSW) #this is the 'weight' variable
# Reproducing simple gender plot:
moe_topline(df=CI, variable=gender, weight=GlobalPSW) %>%
ggplot(aes(x= reorder(Response, -Percent), y=Percent, fill = Response)) +
geom_bar(stat = "identity") +
geom_pointrange( aes(x=Response, y=Percent,
ymin=Percent-MOE, ymax=Percent+MOE), colour="black",
alpha=0.9, size=0.3) +
labs(title = "",
subtitle = "Gender Distribution: Global Weights",
caption = "",
x = "",
y = "Percent") +
geom_text(
aes(label = scales::percent(Percent/100, accuracy=0.1), #add label
vjust=-1,
# hjust=0,
),             #font family
size = 3, #size of text in mm
position = position_dodge(width = 0.9)) +
theme_wiki()+
scale_fill_wiki_d("main")
setwd("C:/Users/zechs/testpackage")
document()
library(devtools)
library(usethis)
library(roxygen2)
setwd("C:/Users/zechs/testpackage")
document()
setwd("..")
install("testpackage")
setwd("C:/Users/zechs/testpackage")
document()
setwd("..")
install("testpackage")
setwd("C:/Users/zechs/testpackage")
document()
setwd("..")
install("testpackage")
moe_topline(df=CI, variable=gender, weight=GlobalPSW) %>%
ggplot(aes(x= reorder(Response, -Percent), y=Percent, fill = Response)) +
geom_bar(stat = "identity") +
geom_pointrange( aes(x=Response, y=Percent,
ymin=Percent-MOE, ymax=Percent+MOE), colour="black",
alpha=0.9, size=0.3) +
labs(title = "",
subtitle = "Gender Distribution: Global Weights",
caption = "",
x = "",
y = "Percent") +
geom_text(
aes(label = scales::percent(Percent/100, accuracy=0.1), #add label
vjust=-1,
# hjust=0,
),             #font family
size = 3, #size of text in mm
position = position_dodge(width = 0.9)) +
theme_wiki()+
scale_fill_wiki_d("main")
setwd("C:/Users/zechs/testpackage")
document()
setwd("..")
install("testpackage")
moe_topline(df=CI, variable=gender, weight=GlobalPSW) %>%
ggplot(aes(x= reorder(Response, -Percent), y=Percent, fill = Response)) +
geom_bar(stat = "identity") +
geom_pointrange( aes(x=Response, y=Percent,
ymin=Percent-MOE, ymax=Percent+MOE), colour="black",
alpha=0.9, size=0.3) +
labs(title = "",
subtitle = "Gender Distribution: Global Weights",
caption = "",
x = "",
y = "Percent") +
geom_text(
aes(label = scales::percent(Percent/100, accuracy=0.1), #add label
vjust=-1,
# hjust=0,
),             #font family
size = 3, #size of text in mm
position = position_dodge(width = 0.9)) +
theme_wiki()+
scale_fill_wiki_d("main")
setwd("C:/Users/zechs/testpackage")
document()
setwd("..")
install("testpackage")
library(testpackage)
moe_topline(df=CI, variable=gender, weight=GlobalPSW) %>%
ggplot(aes(x= reorder(Response, -Percent), y=Percent, fill = Response)) +
geom_bar(stat = "identity") +
geom_pointrange( aes(x=Response, y=Percent,
ymin=Percent-MOE, ymax=Percent+MOE), colour="black",
alpha=0.9, size=0.3) +
labs(title = "",
subtitle = "Gender Distribution: Global Weights",
caption = "",
x = "",
y = "Percent") +
geom_text(
aes(label = scales::percent(Percent/100, accuracy=0.1), #add label
vjust=-1,
# hjust=0,
),             #font family
size = 3, #size of text in mm
position = position_dodge(width = 0.9)) +
theme_wiki()+
scale_fill_wiki_d("main")
moe_topline(df=CI, variable=gender, weight=GlobalPSW) %>%
ggplot(aes(x= reorder(Response, -Percent), y=Percent, fill = Response)) +
geom_bar(stat = "identity") +
geom_pointrange( aes(x=Response, y=Percent,
ymin=Percent-MOE, ymax=Percent+MOE), colour="black",
alpha=0.9, size=0.3) +
labs(title = "",
subtitle = "Gender Distribution: Global Weights",
caption = "",
x = "",
y = "Percent") +
geom_text(
aes(label = scales::percent(Percent/100, accuracy=0.1), #add label
vjust=-1,
# hjust=0,
),             #font family
size = 3, #size of text in mm
position = position_dodge(width = 0.9)) +
scale_fill_wiki_d("main")
moe_topline(df=CI, variable=gender, weight=GlobalPSW) %>%
ggplot(aes(x= reorder(Response, -Percent), y=Percent, fill = Response)) +
geom_bar(stat = "identity") +
geom_pointrange( aes(x=Response, y=Percent,
ymin=Percent-MOE, ymax=Percent+MOE), colour="black",
alpha=0.9, size=0.3) +
labs(title = "",
subtitle = "Gender Distribution: Global Weights",
caption = "",
x = "",
y = "Percent") +
geom_text(
aes(label = scales::percent(Percent/100, accuracy=0.1), #add label
vjust=-1,
# hjust=0,
),             #font family
size = 3, #size of text in mm
position = position_dodge(width = 0.9)) +
theme_wiki()+
scale_fill_wiki_d("main")
